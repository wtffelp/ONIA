/* Autogenerated by mlir-tblgen; don't manually edit */

#ifdef GEN_PASS_DECL
// Generate declarations for all passes.
#define GEN_PASS_DECL_MATHEXTENDTOSUPPORTEDTYPES
#define GEN_PASS_DECL_MATHUPLIFTTOFMA
#undef GEN_PASS_DECL
#endif // GEN_PASS_DECL

//===----------------------------------------------------------------------===//
// MathExtendToSupportedTypes
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_MATHEXTENDTOSUPPORTEDTYPES
struct MathExtendToSupportedTypesOptions {
  ::llvm::SmallVector<std::string> extraTypeStrs;
  std::string targetTypeStr = "f32";
};
std::unique_ptr<::mlir::Pass> createMathExtendToSupportedTypes();
std::unique_ptr<::mlir::Pass> createMathExtendToSupportedTypes(MathExtendToSupportedTypesOptions options);
#undef GEN_PASS_DECL_MATHEXTENDTOSUPPORTEDTYPES
#endif // GEN_PASS_DECL_MATHEXTENDTOSUPPORTEDTYPES
#ifdef GEN_PASS_DEF_MATHEXTENDTOSUPPORTEDTYPES

namespace impl {
  std::unique_ptr<::mlir::Pass> createMathExtendToSupportedTypes();
} // namespace impl

namespace impl {
  std::unique_ptr<::mlir::Pass> createMathExtendToSupportedTypes(MathExtendToSupportedTypesOptions options);
} // namespace impl
namespace impl {

template <typename DerivedT>
class MathExtendToSupportedTypesBase : public ::mlir::OperationPass<> {
public:
  using Base = MathExtendToSupportedTypesBase;

  MathExtendToSupportedTypesBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  MathExtendToSupportedTypesBase(const MathExtendToSupportedTypesBase &other) : ::mlir::OperationPass<>(other) {}
  MathExtendToSupportedTypesBase& operator=(const MathExtendToSupportedTypesBase &) = delete;
  MathExtendToSupportedTypesBase(MathExtendToSupportedTypesBase &&) = delete;
  MathExtendToSupportedTypesBase& operator=(MathExtendToSupportedTypesBase &&) = delete;
  ~MathExtendToSupportedTypesBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("math-extend-to-supported-types");
  }
  ::llvm::StringRef getArgument() const override { return "math-extend-to-supported-types"; }

  ::llvm::StringRef getDescription() const override { return "Legalize floating-point math ops on low-precision floats"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("MathExtendToSupportedTypes");
  }
  ::llvm::StringRef getName() const override { return "MathExtendToSupportedTypes"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<math::MathDialect>();
    registry.insert<arith::ArithDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(MathExtendToSupportedTypesBase<DerivedT>)

  MathExtendToSupportedTypesBase(MathExtendToSupportedTypesOptions options) : MathExtendToSupportedTypesBase() {
    extraTypeStrs = std::move(options.extraTypeStrs);
    targetTypeStr = std::move(options.targetTypeStr);
  }
protected:
  ::mlir::Pass::ListOption<std::string> extraTypeStrs{*this, "extra-types", ::llvm::cl::desc("MLIR types with arithmetic support on a given target (f64 and f32 are implicitly supported)")};
  ::mlir::Pass::Option<std::string> targetTypeStr{*this, "target-type", ::llvm::cl::desc("MLIR type to convert the unsupported source types to"), ::llvm::cl::init("f32")};
private:

  friend std::unique_ptr<::mlir::Pass> createMathExtendToSupportedTypes() {
    return std::make_unique<DerivedT>();
  }

  friend std::unique_ptr<::mlir::Pass> createMathExtendToSupportedTypes(MathExtendToSupportedTypesOptions options) {
    return std::make_unique<DerivedT>(std::move(options));
  }
};
} // namespace impl

std::unique_ptr<::mlir::Pass> createMathExtendToSupportedTypes() {
  return impl::createMathExtendToSupportedTypes();
}

std::unique_ptr<::mlir::Pass> createMathExtendToSupportedTypes(MathExtendToSupportedTypesOptions options) {
  return impl::createMathExtendToSupportedTypes(std::move(options));
}
#undef GEN_PASS_DEF_MATHEXTENDTOSUPPORTEDTYPES
#endif // GEN_PASS_DEF_MATHEXTENDTOSUPPORTEDTYPES

//===----------------------------------------------------------------------===//
// MathUpliftToFMA
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_MATHUPLIFTTOFMA
std::unique_ptr<::mlir::Pass> createMathUpliftToFMA();
#undef GEN_PASS_DECL_MATHUPLIFTTOFMA
#endif // GEN_PASS_DECL_MATHUPLIFTTOFMA
#ifdef GEN_PASS_DEF_MATHUPLIFTTOFMA

namespace impl {
  std::unique_ptr<::mlir::Pass> createMathUpliftToFMA();
} // namespace impl
namespace impl {

template <typename DerivedT>
class MathUpliftToFMABase : public ::mlir::OperationPass<> {
public:
  using Base = MathUpliftToFMABase;

  MathUpliftToFMABase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  MathUpliftToFMABase(const MathUpliftToFMABase &other) : ::mlir::OperationPass<>(other) {}
  MathUpliftToFMABase& operator=(const MathUpliftToFMABase &) = delete;
  MathUpliftToFMABase(MathUpliftToFMABase &&) = delete;
  MathUpliftToFMABase& operator=(MathUpliftToFMABase &&) = delete;
  ~MathUpliftToFMABase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("math-uplift-to-fma");
  }
  ::llvm::StringRef getArgument() const override { return "math-uplift-to-fma"; }

  ::llvm::StringRef getDescription() const override { return "Uplift arith ops to math.fma."; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("MathUpliftToFMA");
  }
  ::llvm::StringRef getName() const override { return "MathUpliftToFMA"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<math::MathDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(MathUpliftToFMABase<DerivedT>)

protected:
private:

  friend std::unique_ptr<::mlir::Pass> createMathUpliftToFMA() {
    return std::make_unique<DerivedT>();
  }
};
} // namespace impl

std::unique_ptr<::mlir::Pass> createMathUpliftToFMA() {
  return impl::createMathUpliftToFMA();
}
#undef GEN_PASS_DEF_MATHUPLIFTTOFMA
#endif // GEN_PASS_DEF_MATHUPLIFTTOFMA
#ifdef GEN_PASS_REGISTRATION

//===----------------------------------------------------------------------===//
// MathExtendToSupportedTypes Registration
//===----------------------------------------------------------------------===//

inline void registerMathExtendToSupportedTypes() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createMathExtendToSupportedTypes();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerMathExtendToSupportedTypesPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createMathExtendToSupportedTypes();
  });
}

//===----------------------------------------------------------------------===//
// MathUpliftToFMA Registration
//===----------------------------------------------------------------------===//

inline void registerMathUpliftToFMA() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createMathUpliftToFMA();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerMathUpliftToFMAPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createMathUpliftToFMA();
  });
}

//===----------------------------------------------------------------------===//
// Math Registration
//===----------------------------------------------------------------------===//

inline void registerMathPasses() {
  registerMathExtendToSupportedTypes();
  registerMathUpliftToFMA();
}
#undef GEN_PASS_REGISTRATION
#endif // GEN_PASS_REGISTRATION
// Deprecated. Please use the new per-pass macros.
#ifdef GEN_PASS_CLASSES

template <typename DerivedT>
class MathExtendToSupportedTypesBase : public ::mlir::OperationPass<> {
public:
  using Base = MathExtendToSupportedTypesBase;

  MathExtendToSupportedTypesBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  MathExtendToSupportedTypesBase(const MathExtendToSupportedTypesBase &other) : ::mlir::OperationPass<>(other) {}
  MathExtendToSupportedTypesBase& operator=(const MathExtendToSupportedTypesBase &) = delete;
  MathExtendToSupportedTypesBase(MathExtendToSupportedTypesBase &&) = delete;
  MathExtendToSupportedTypesBase& operator=(MathExtendToSupportedTypesBase &&) = delete;
  ~MathExtendToSupportedTypesBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("math-extend-to-supported-types");
  }
  ::llvm::StringRef getArgument() const override { return "math-extend-to-supported-types"; }

  ::llvm::StringRef getDescription() const override { return "Legalize floating-point math ops on low-precision floats"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("MathExtendToSupportedTypes");
  }
  ::llvm::StringRef getName() const override { return "MathExtendToSupportedTypes"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<math::MathDialect>();
    registry.insert<arith::ArithDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(MathExtendToSupportedTypesBase<DerivedT>)

protected:
  ::mlir::Pass::ListOption<std::string> extraTypeStrs{*this, "extra-types", ::llvm::cl::desc("MLIR types with arithmetic support on a given target (f64 and f32 are implicitly supported)")};
  ::mlir::Pass::Option<std::string> targetTypeStr{*this, "target-type", ::llvm::cl::desc("MLIR type to convert the unsupported source types to"), ::llvm::cl::init("f32")};
};

template <typename DerivedT>
class MathUpliftToFMABase : public ::mlir::OperationPass<> {
public:
  using Base = MathUpliftToFMABase;

  MathUpliftToFMABase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  MathUpliftToFMABase(const MathUpliftToFMABase &other) : ::mlir::OperationPass<>(other) {}
  MathUpliftToFMABase& operator=(const MathUpliftToFMABase &) = delete;
  MathUpliftToFMABase(MathUpliftToFMABase &&) = delete;
  MathUpliftToFMABase& operator=(MathUpliftToFMABase &&) = delete;
  ~MathUpliftToFMABase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("math-uplift-to-fma");
  }
  ::llvm::StringRef getArgument() const override { return "math-uplift-to-fma"; }

  ::llvm::StringRef getDescription() const override { return "Uplift arith ops to math.fma."; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("MathUpliftToFMA");
  }
  ::llvm::StringRef getName() const override { return "MathUpliftToFMA"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<math::MathDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(MathUpliftToFMABase<DerivedT>)

protected:
};
#undef GEN_PASS_CLASSES
#endif // GEN_PASS_CLASSES
